// <auto-generated />
using System;
using EEU.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EEU.Migrations
{
    [DbContext(typeof(EEUContext))]
    [Migration("20230216092748_GenusOneHot")]
    partial class GenusOneHot
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EEU.Model.AtmosphereComposition", b =>
                {
                    b.Property<decimal>("BodyId64")
                        .HasColumnType("decimal(20,0)");

                    b.Property<double>("Ammonia")
                        .HasColumnType("float");

                    b.Property<double>("Argon")
                        .HasColumnType("float");

                    b.Property<double>("CarbonDioxide")
                        .HasColumnType("float");

                    b.Property<double>("Helium")
                        .HasColumnType("float");

                    b.Property<double>("Hydrogen")
                        .HasColumnType("float");

                    b.Property<double>("Iron")
                        .HasColumnType("float");

                    b.Property<double>("Methane")
                        .HasColumnType("float");

                    b.Property<double>("Neon")
                        .HasColumnType("float");

                    b.Property<double>("Nitrogen")
                        .HasColumnType("float");

                    b.Property<double>("Oxygen")
                        .HasColumnType("float");

                    b.Property<double>("Silicates")
                        .HasColumnType("float");

                    b.Property<double>("SulphurDioxide")
                        .HasColumnType("float");

                    b.Property<double>("Water")
                        .HasColumnType("float");

                    b.HasKey("BodyId64");

                    b.ToTable("AtmosphereCompositions");
                });

            modelBuilder.Entity("EEU.Model.Biology.Biology", b =>
                {
                    b.Property<string>("BodyName")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Genus")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Species")
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("SystemId64")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("BodyName", "Genus", "Species", "SystemId64");

                    b.HasIndex("Genus", "Species");

                    b.ToTable("Biology");
                });

            modelBuilder.Entity("EEU.Model.Biology.SpeciesInformation", b =>
                {
                    b.Property<string>("Genus")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Species")
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("ClonalRange")
                        .HasColumnType("bigint");

                    b.Property<long>("Value")
                        .HasColumnType("bigint");

                    b.HasKey("Genus", "Species");

                    b.ToTable("Species");
                });

            modelBuilder.Entity("EEU.Model.Body", b =>
                {
                    b.Property<decimal>("Id64")
                        .HasColumnType("decimal(20,0)");

                    b.Property<double?>("AbsoluteMagnitude")
                        .HasColumnType("float");

                    b.Property<long?>("Age")
                        .HasColumnType("bigint");

                    b.Property<double?>("AgeOfPeriapsis")
                        .HasColumnType("float");

                    b.Property<double?>("AscendingNode")
                        .HasColumnType("float");

                    b.Property<string>("AtmosphereType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("AxialTilt")
                        .HasColumnType("float");

                    b.Property<decimal>("BodyId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<double?>("DistanceToArrival")
                        .HasColumnType("float");

                    b.Property<double?>("EarthMasses")
                        .HasColumnType("float");

                    b.Property<double?>("Gravity")
                        .HasColumnType("float");

                    b.Property<bool>("IsLandable")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Luminosity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("MainStar")
                        .HasColumnType("bit");

                    b.Property<double?>("MeanAnomaly")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("OrbitalEccentricity")
                        .HasColumnType("float");

                    b.Property<double?>("OrbitalInclination")
                        .HasColumnType("float");

                    b.Property<double?>("Radius")
                        .HasColumnType("float");

                    b.Property<string>("ReserveLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("RotationalPeriod")
                        .HasColumnType("float");

                    b.Property<bool?>("RotationalPeriodTidallyLocked")
                        .HasColumnType("bit");

                    b.Property<double?>("SemiMajorAxis")
                        .HasColumnType("float");

                    b.Property<double?>("SolarMasses")
                        .HasColumnType("float");

                    b.Property<double?>("SolarRadius")
                        .HasColumnType("float");

                    b.Property<string>("SpectralClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubType")
                        .HasColumnType("nvarchar(100)");

                    b.Property<double?>("SurfacePressure")
                        .HasColumnType("float");

                    b.Property<double?>("SurfaceTemperature")
                        .HasColumnType("float");

                    b.Property<decimal>("SystemId64")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("TerraformingState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("VolcanismType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id64");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id64"), false);

                    b.HasIndex("IsLandable")
                        .HasFilter("[Type] IS NOT NULL");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("IsLandable"), new[] { "Name", "Type", "SubType" });

                    b.HasIndex("Name");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("Name"));

                    b.HasIndex("SystemId64", "BodyId")
                        .IsUnique();

                    b.HasIndex("Type", "IsLandable")
                        .HasFilter("[Type] IS NOT NULL");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("Type", "IsLandable"), new[] { "Name", "SubType" });

                    b.ToTable("Bodies");
                });

            modelBuilder.Entity("EEU.Model.Genus", b =>
                {
                    b.Property<decimal>("SignalsBodyId64")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("SignalsBodyId64", "Name");

                    b.HasIndex("Name", "SignalsBodyId64")
                        .IsUnique();

                    b.ToTable("Genera");
                });

            modelBuilder.Entity("EEU.Model.Materials", b =>
                {
                    b.Property<decimal>("BodyId64")
                        .HasColumnType("decimal(20,0)");

                    b.Property<double>("Antimony")
                        .HasColumnType("float");

                    b.Property<double>("Arsenic")
                        .HasColumnType("float");

                    b.Property<double>("Cadmium")
                        .HasColumnType("float");

                    b.Property<double>("Carbon")
                        .HasColumnType("float");

                    b.Property<double>("Chromium")
                        .HasColumnType("float");

                    b.Property<double>("Germanium")
                        .HasColumnType("float");

                    b.Property<double>("Iron")
                        .HasColumnType("float");

                    b.Property<double>("Manganese")
                        .HasColumnType("float");

                    b.Property<double>("Mercury")
                        .HasColumnType("float");

                    b.Property<double>("Molybdenum")
                        .HasColumnType("float");

                    b.Property<double>("Nickel")
                        .HasColumnType("float");

                    b.Property<double>("Niobium")
                        .HasColumnType("float");

                    b.Property<double>("Phosphorus")
                        .HasColumnType("float");

                    b.Property<double>("Polonium")
                        .HasColumnType("float");

                    b.Property<double>("Ruthenium")
                        .HasColumnType("float");

                    b.Property<double>("Selenium")
                        .HasColumnType("float");

                    b.Property<double>("Sulphur")
                        .HasColumnType("float");

                    b.Property<double>("Technetium")
                        .HasColumnType("float");

                    b.Property<double>("Tellurium")
                        .HasColumnType("float");

                    b.Property<double>("Tin")
                        .HasColumnType("float");

                    b.Property<double>("Tungsten")
                        .HasColumnType("float");

                    b.Property<double>("Vanadium")
                        .HasColumnType("float");

                    b.Property<double>("Yttrium")
                        .HasColumnType("float");

                    b.Property<double>("Zinc")
                        .HasColumnType("float");

                    b.Property<double>("Zirconium")
                        .HasColumnType("float");

                    b.HasKey("BodyId64");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("EEU.Model.OneHotGenuses", b =>
                {
                    b.Property<decimal>("BodyId64")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("Aleoids")
                        .HasColumnType("bit");

                    b.Property<bool>("Bacterial")
                        .HasColumnType("bit");

                    b.Property<bool>("Cactoid")
                        .HasColumnType("bit");

                    b.Property<bool>("Clypeus")
                        .HasColumnType("bit");

                    b.Property<bool>("Conchas")
                        .HasColumnType("bit");

                    b.Property<bool>("Electricae")
                        .HasColumnType("bit");

                    b.Property<bool>("Fonticulus")
                        .HasColumnType("bit");

                    b.Property<bool>("Fumerolas")
                        .HasColumnType("bit");

                    b.Property<bool>("Fungoids")
                        .HasColumnType("bit");

                    b.Property<bool>("Osseus")
                        .HasColumnType("bit");

                    b.Property<bool>("Recepta")
                        .HasColumnType("bit");

                    b.Property<bool>("Shrubs")
                        .HasColumnType("bit");

                    b.Property<bool>("Stratum")
                        .HasColumnType("bit");

                    b.Property<bool>("Tubus")
                        .HasColumnType("bit");

                    b.Property<bool>("Tussocks")
                        .HasColumnType("bit");

                    b.HasKey("BodyId64");

                    b.ToTable((string)null);

                    b.ToView("OneHotGenera", (string)null);
                });

            modelBuilder.Entity("EEU.Model.Parent", b =>
                {
                    b.Property<decimal>("BodyId64")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("Local")
                        .HasColumnType("decimal(20,0)");

                    b.Property<int>("Kind")
                        .HasColumnType("int");

                    b.HasKey("BodyId64", "Local");

                    b.ToTable("Parents");
                });

            modelBuilder.Entity("EEU.Model.Signals", b =>
                {
                    b.Property<decimal>("BodyId64")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.HasKey("BodyId64");

                    b.ToTable("Signals");
                });

            modelBuilder.Entity("EEU.Model.SolidComposition", b =>
                {
                    b.Property<decimal>("BodyId64")
                        .HasColumnType("decimal(20,0)");

                    b.Property<double>("Ice")
                        .HasColumnType("float");

                    b.Property<double>("Metal")
                        .HasColumnType("float");

                    b.Property<double>("Rock")
                        .HasColumnType("float");

                    b.HasKey("BodyId64");

                    b.ToTable("SolidCompositions");
                });

            modelBuilder.Entity("EEU.Model.System", b =>
                {
                    b.Property<decimal>("Id64")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("BodyCount")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.Property<decimal>("Population")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id64");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id64"), false);

                    b.HasIndex("Name");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("Name"));

                    b.ToTable("Systems");
                });

            modelBuilder.Entity("EEU.Model.AtmosphereComposition", b =>
                {
                    b.HasOne("EEU.Model.Body", "Body")
                        .WithOne("AtmosphereComposition")
                        .HasForeignKey("EEU.Model.AtmosphereComposition", "BodyId64")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Body");
                });

            modelBuilder.Entity("EEU.Model.Body", b =>
                {
                    b.HasOne("EEU.Model.System", "System")
                        .WithMany("Bodies")
                        .HasForeignKey("SystemId64")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("System");
                });

            modelBuilder.Entity("EEU.Model.Genus", b =>
                {
                    b.HasOne("EEU.Model.Signals", "Signals")
                        .WithMany("Genuses")
                        .HasForeignKey("SignalsBodyId64")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Signals");
                });

            modelBuilder.Entity("EEU.Model.Materials", b =>
                {
                    b.HasOne("EEU.Model.Body", "Body")
                        .WithOne("Materials")
                        .HasForeignKey("EEU.Model.Materials", "BodyId64")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Body");
                });

            modelBuilder.Entity("EEU.Model.OneHotGenuses", b =>
                {
                    b.HasOne("EEU.Model.Body", "Body")
                        .WithOne()
                        .HasForeignKey("EEU.Model.OneHotGenuses", "BodyId64")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Body");
                });

            modelBuilder.Entity("EEU.Model.Parent", b =>
                {
                    b.HasOne("EEU.Model.Body", "Body")
                        .WithMany("Parents")
                        .HasForeignKey("BodyId64")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Body");
                });

            modelBuilder.Entity("EEU.Model.Signals", b =>
                {
                    b.HasOne("EEU.Model.Body", "Body")
                        .WithOne("Signals")
                        .HasForeignKey("EEU.Model.Signals", "BodyId64")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("EEU.Model.Detections", "Detections", b1 =>
                        {
                            b1.Property<decimal>("SignalsBodyId64")
                                .HasColumnType("decimal(20,0)");

                            b1.Property<long>("Alexandrite")
                                .HasColumnType("bigint");

                            b1.Property<long>("Benitoite")
                                .HasColumnType("bigint");

                            b1.Property<long>("Biological")
                                .HasColumnType("bigint");

                            b1.Property<long>("Geological")
                                .HasColumnType("bigint");

                            b1.Property<long>("Guardian")
                                .HasColumnType("bigint");

                            b1.Property<long>("Human")
                                .HasColumnType("bigint");

                            b1.Property<long>("Monazite")
                                .HasColumnType("bigint");

                            b1.Property<long>("Musgravite")
                                .HasColumnType("bigint");

                            b1.Property<long>("Other")
                                .HasColumnType("bigint");

                            b1.Property<long>("Painite")
                                .HasColumnType("bigint");

                            b1.Property<long>("Platinum")
                                .HasColumnType("bigint");

                            b1.Property<long>("Rhodplumsite")
                                .HasColumnType("bigint");

                            b1.Property<long>("Serendibite")
                                .HasColumnType("bigint");

                            b1.Property<long>("Thargoid")
                                .HasColumnType("bigint");

                            b1.HasKey("SignalsBodyId64");

                            b1.ToTable("Signals");

                            b1.WithOwner()
                                .HasForeignKey("SignalsBodyId64");
                        });

                    b.Navigation("Body");

                    b.Navigation("Detections")
                        .IsRequired();
                });

            modelBuilder.Entity("EEU.Model.SolidComposition", b =>
                {
                    b.HasOne("EEU.Model.Body", "Body")
                        .WithOne("SolidComposition")
                        .HasForeignKey("EEU.Model.SolidComposition", "BodyId64")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Body");
                });

            modelBuilder.Entity("EEU.Model.System", b =>
                {
                    b.OwnsOne("EEU.Model.Coords", "Coords", b1 =>
                        {
                            b1.Property<decimal>("SystemId64")
                                .HasColumnType("decimal(20,0)");

                            b1.Property<double>("X")
                                .HasColumnType("float");

                            b1.Property<double>("Y")
                                .HasColumnType("float");

                            b1.Property<double>("Z")
                                .HasColumnType("float");

                            b1.HasKey("SystemId64");

                            b1.ToTable("Systems");

                            b1.WithOwner()
                                .HasForeignKey("SystemId64");
                        });

                    b.Navigation("Coords")
                        .IsRequired();
                });

            modelBuilder.Entity("EEU.Model.Body", b =>
                {
                    b.Navigation("AtmosphereComposition");

                    b.Navigation("Materials");

                    b.Navigation("Parents");

                    b.Navigation("Signals");

                    b.Navigation("SolidComposition");
                });

            modelBuilder.Entity("EEU.Model.Signals", b =>
                {
                    b.Navigation("Genuses");
                });

            modelBuilder.Entity("EEU.Model.System", b =>
                {
                    b.Navigation("Bodies");
                });
#pragma warning restore 612, 618
        }
    }
}
