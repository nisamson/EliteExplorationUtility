// <auto-generated />
using System;
using EEU.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;

#nullable disable

namespace EEU.Migrations
{
    [DbContext(typeof(EEUContext))]
    partial class EEUContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.2");

            modelBuilder.Entity("EEU.Model.AtmosphereComposition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Ammonia")
                        .HasColumnType("REAL");

                    b.Property<double?>("Argon")
                        .HasColumnType("REAL");

                    b.Property<ulong>("BodyId64")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("CarbonDioxide")
                        .HasColumnType("REAL");

                    b.Property<double?>("Helium")
                        .HasColumnType("REAL");

                    b.Property<double?>("Hydrogen")
                        .HasColumnType("REAL");

                    b.Property<double?>("Iron")
                        .HasColumnType("REAL");

                    b.Property<double?>("Methane")
                        .HasColumnType("REAL");

                    b.Property<double?>("Neon")
                        .HasColumnType("REAL");

                    b.Property<double?>("Nitrogen")
                        .HasColumnType("REAL");

                    b.Property<double?>("Oxygen")
                        .HasColumnType("REAL");

                    b.Property<double?>("Silicates")
                        .HasColumnType("REAL");

                    b.Property<double?>("SulphurDioxide")
                        .HasColumnType("REAL");

                    b.Property<double?>("Water")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("BodyId64")
                        .IsUnique();

                    b.ToTable("AtmosphereCompositions");
                });

            modelBuilder.Entity("EEU.Model.Body", b =>
                {
                    b.Property<ulong>("Id64")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double?>("AbsoluteMagnitude")
                        .HasColumnType("REAL");

                    b.Property<long?>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("AgeOfPeriapsis")
                        .HasColumnType("REAL");

                    b.Property<double?>("AscendingNode")
                        .HasColumnType("REAL");

                    b.Property<string>("AtmosphereType")
                        .HasColumnType("TEXT");

                    b.Property<double?>("AxialTilt")
                        .HasColumnType("REAL");

                    b.Property<ulong>("BodyId")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("DistanceToArrival")
                        .HasColumnType("REAL");

                    b.Property<double?>("EarthMasses")
                        .HasColumnType("REAL");

                    b.Property<double?>("Gravity")
                        .HasColumnType("REAL");

                    b.Property<bool?>("IsLandable")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Luminosity")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("MainStar")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("MeanAnomaly")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double?>("OrbitalEccentricity")
                        .HasColumnType("REAL");

                    b.Property<double?>("OrbitalInclination")
                        .HasColumnType("REAL");

                    b.Property<double?>("Radius")
                        .HasColumnType("REAL");

                    b.Property<string>("ReserveLevel")
                        .HasColumnType("TEXT");

                    b.Property<double?>("RotationalPeriod")
                        .HasColumnType("REAL");

                    b.Property<bool?>("RotationalPeriodTidallyLocked")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("SemiMajorAxis")
                        .HasColumnType("REAL");

                    b.Property<double?>("SolarMasses")
                        .HasColumnType("REAL");

                    b.Property<double?>("SolarRadius")
                        .HasColumnType("REAL");

                    b.Property<string>("SpectralClass")
                        .HasColumnType("TEXT");

                    b.Property<string>("SubType")
                        .HasColumnType("TEXT");

                    b.Property<double?>("SurfacePressure")
                        .HasColumnType("REAL");

                    b.Property<double?>("SurfaceTemperature")
                        .HasColumnType("REAL");

                    b.Property<ulong>("SystemId64")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TerraformingState")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("VolcanismType")
                        .HasColumnType("TEXT");

                    b.HasKey("Id64");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("SystemId64", "BodyId");

                    b.ToTable("Bodies");
                });

            modelBuilder.Entity("EEU.Model.Genus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("SignalsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SignalsId");

                    b.ToTable("Genera");
                });

            modelBuilder.Entity("EEU.Model.Materials", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Antimony")
                        .HasColumnType("REAL");

                    b.Property<double?>("Arsenic")
                        .HasColumnType("REAL");

                    b.Property<ulong>("BodyId64")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Cadmium")
                        .HasColumnType("REAL");

                    b.Property<double?>("Carbon")
                        .HasColumnType("REAL");

                    b.Property<double?>("Chromium")
                        .HasColumnType("REAL");

                    b.Property<double?>("Germanium")
                        .HasColumnType("REAL");

                    b.Property<double>("Iron")
                        .HasColumnType("REAL");

                    b.Property<double?>("Manganese")
                        .HasColumnType("REAL");

                    b.Property<double?>("Mercury")
                        .HasColumnType("REAL");

                    b.Property<double?>("Molybdenum")
                        .HasColumnType("REAL");

                    b.Property<double>("Nickel")
                        .HasColumnType("REAL");

                    b.Property<double?>("Niobium")
                        .HasColumnType("REAL");

                    b.Property<double?>("Phosphorus")
                        .HasColumnType("REAL");

                    b.Property<double?>("Polonium")
                        .HasColumnType("REAL");

                    b.Property<double?>("Ruthenium")
                        .HasColumnType("REAL");

                    b.Property<double?>("Selenium")
                        .HasColumnType("REAL");

                    b.Property<double?>("Sulphur")
                        .HasColumnType("REAL");

                    b.Property<double?>("Technetium")
                        .HasColumnType("REAL");

                    b.Property<double?>("Tellurium")
                        .HasColumnType("REAL");

                    b.Property<double?>("Tin")
                        .HasColumnType("REAL");

                    b.Property<double?>("Tungsten")
                        .HasColumnType("REAL");

                    b.Property<double?>("Vanadium")
                        .HasColumnType("REAL");

                    b.Property<double?>("Yttrium")
                        .HasColumnType("REAL");

                    b.Property<double?>("Zinc")
                        .HasColumnType("REAL");

                    b.Property<double?>("Zirconium")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("BodyId64")
                        .IsUnique();

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("EEU.Model.Parent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("BodyId64")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Kind")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("Local")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BodyId64");

                    b.ToTable("Parents");
                });

            modelBuilder.Entity("EEU.Model.Signals", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("BodyId64")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BodyId64")
                        .IsUnique();

                    b.ToTable("Signals");
                });

            modelBuilder.Entity("EEU.Model.SolidComposition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("BodyId64")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Ice")
                        .HasColumnType("REAL");

                    b.Property<double>("Metal")
                        .HasColumnType("REAL");

                    b.Property<double>("Rock")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("BodyId64")
                        .IsUnique();

                    b.ToTable("SolidCompositions");
                });

            modelBuilder.Entity("EEU.Model.Station", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Stations");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Station");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("EEU.Model.System", b =>
                {
                    b.Property<ulong>("Id64")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<ulong?>("BodyCount")
                        .HasColumnType("INTEGER");

                    b.Property<Point>("Coords")
                        .IsRequired()
                        .HasColumnType("POINTZ");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<ulong?>("Population")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id64");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Systems");
                });

            modelBuilder.Entity("EEU.Model.BodyStation", b =>
                {
                    b.HasBaseType("EEU.Model.Station");

                    b.Property<ulong>("BodyId64")
                        .HasColumnType("INTEGER");

                    b.HasIndex("BodyId64");

                    b.HasDiscriminator().HasValue("BodyStation");
                });

            modelBuilder.Entity("EEU.Model.SystemStation", b =>
                {
                    b.HasBaseType("EEU.Model.Station");

                    b.Property<ulong>("SystemId64")
                        .HasColumnType("INTEGER");

                    b.HasIndex("SystemId64");

                    b.HasDiscriminator().HasValue("SystemStation");
                });

            modelBuilder.Entity("EEU.Model.AtmosphereComposition", b =>
                {
                    b.HasOne("EEU.Model.Body", "Body")
                        .WithOne("AtmosphereComposition")
                        .HasForeignKey("EEU.Model.AtmosphereComposition", "BodyId64")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Body");
                });

            modelBuilder.Entity("EEU.Model.Body", b =>
                {
                    b.HasOne("EEU.Model.System", "System")
                        .WithMany("Bodies")
                        .HasForeignKey("SystemId64")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("System");
                });

            modelBuilder.Entity("EEU.Model.Genus", b =>
                {
                    b.HasOne("EEU.Model.Signals", "Signals")
                        .WithMany("Genuses")
                        .HasForeignKey("SignalsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Signals");
                });

            modelBuilder.Entity("EEU.Model.Materials", b =>
                {
                    b.HasOne("EEU.Model.Body", "Body")
                        .WithOne("Materials")
                        .HasForeignKey("EEU.Model.Materials", "BodyId64")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Body");
                });

            modelBuilder.Entity("EEU.Model.Parent", b =>
                {
                    b.HasOne("EEU.Model.Body", "Body")
                        .WithMany("Parents")
                        .HasForeignKey("BodyId64")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Body");
                });

            modelBuilder.Entity("EEU.Model.Signals", b =>
                {
                    b.HasOne("EEU.Model.Body", "Body")
                        .WithOne("Signals")
                        .HasForeignKey("EEU.Model.Signals", "BodyId64")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("EEU.Model.Signals+Detections", "Detected", b1 =>
                        {
                            b1.Property<long>("SignalsId")
                                .HasColumnType("INTEGER");

                            b1.HasKey("SignalsId");

                            b1.ToTable("Signals");

                            b1.WithOwner()
                                .HasForeignKey("SignalsId");
                        });

                    b.Navigation("Body");

                    b.Navigation("Detected")
                        .IsRequired();
                });

            modelBuilder.Entity("EEU.Model.SolidComposition", b =>
                {
                    b.HasOne("EEU.Model.Body", "Body")
                        .WithOne("SolidComposition")
                        .HasForeignKey("EEU.Model.SolidComposition", "BodyId64")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Body");
                });

            modelBuilder.Entity("EEU.Model.BodyStation", b =>
                {
                    b.HasOne("EEU.Model.Body", "Body")
                        .WithMany("Stations")
                        .HasForeignKey("BodyId64")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Body");
                });

            modelBuilder.Entity("EEU.Model.SystemStation", b =>
                {
                    b.HasOne("EEU.Model.System", "System")
                        .WithMany("Stations")
                        .HasForeignKey("SystemId64")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("System");
                });

            modelBuilder.Entity("EEU.Model.Body", b =>
                {
                    b.Navigation("AtmosphereComposition");

                    b.Navigation("Materials");

                    b.Navigation("Parents");

                    b.Navigation("Signals");

                    b.Navigation("SolidComposition");

                    b.Navigation("Stations");
                });

            modelBuilder.Entity("EEU.Model.Signals", b =>
                {
                    b.Navigation("Genuses");
                });

            modelBuilder.Entity("EEU.Model.System", b =>
                {
                    b.Navigation("Bodies");

                    b.Navigation("Stations");
                });
#pragma warning restore 612, 618
        }
    }
}
